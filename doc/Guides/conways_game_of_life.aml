<?xml version="1.0" encoding="utf-8"?>
<topic id="fda06c87-3c98-4ebd-81ba-ca03ff28d18c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>This example will use the concept of Conway's Game of Life to create sound.
      The sound will be made using MIDI Gremlin.</para>
      <para>The example is seperated into three parts: "Program", "GameOfLife" and "DirectRender".
      The Program part is used as a setup class for GameOfLife.
      The GameOfLife contains all the calculations of the project.</para>
      <autoOutline>1</autoOutline>
      <para>The DirectRender class will not be described in this example but can be found in the sourcecode. 
      It is simply a class used for rendering the graphics.</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Game of Life music</title>
      <content>
      	<para>This section will describe the methods from the "GameOfLife" class that are used to create music.</para>
      </content>
      <sections>
          <section address="SubSection0">
	          <title>Game of Life constructor</title>
		      <content>
		      	<para>The constructor sets creates a grid for the values used in the game of life, as well as a grid for the temporary values used between each generation.
		      	The constructor also starts a timer that calls the update method every 0.75 seconds.</para>
			    <code language="Csharp" source="..\eksamples\ConwaysGameOfLife\GameOfLife.cs" region="Constructor" />
		      </content>
          </section>
          <section address="SubSection1">
              <title>UpdateMethod</title>
              <content>
		      	<para>The update method is the method used for calling the drawing and music methods, as well as updating all values in the grid.</para>
		      	<code language="Csharp" source="..\eksamples\ConwaysGameOfLife\GameOfLife.cs" region="UpdateMethod" />
		      </content>
          </section>
          <section address="SubSection2">
              <title>MusicSetup-method</title>
              <content>
		      	<para>The MusicSetup method enables the music to be played.
		      	This method is called from outside the class, and is required before the game will play any music.</para>
		      	<code language="Csharp" source="..\eksamples\ConwaysGameOfLife\GameOfLife.cs" region="MusicSetup" />
		      </content>
          </section>
          <section address="SubSection3">
          	  <title>PlayMidiMusic-Method</title>
	          <content>
		      	<para>The PlayMidiMusic method plays the music when called.
		      	The sounds that are played is decided by the values in the grid.
		      	Each true value plays a sound decided by where the value lies on the grid's x-axis.
		      	The y-axis instead decides when values are played. A higher y-value means a longer delay before the sound is played.
		      	</para>
		      	<code language="Csharp" source="..\eksamples\ConwaysGameOfLife\GameOfLife.cs" region="PlayMidiMusic" />
		      </content>
          </section>
      </sections>
      
     
    </section>
    <section address="Section2">
      <title>Program: Setup values</title>
      <content>
      	<para>These are the intitial values put used to start the game as well as the visual rendering and music.
      	The two "Gliders" are put into a grid, and this grid is then used to start a new Game of life.
      	After the game is started, the drawing is turned on, and the MusicSetupMethod is called to enable music playing.
      	</para>
	    <code language="Csharp" source="..\eksamples\ConwaysGameOfLife\Program.cs" />
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <section address="Section3">
      <title>Game of Life class code.</title>
      <content>
      	<para>This is the entire code from the GameOfLife class.</para>
	    <code language="Csharp" source="..\eksamples\ConwaysGameOfLife\GameOfLife.cs" />
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>